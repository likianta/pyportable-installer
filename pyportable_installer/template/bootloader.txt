"""
Placeholders:
    LIB_RELDIR
    SITE_PACKAGES
    EXTEND_SYS_PATHS
    TARGET_RELDIR
    TARGET_PKG
    TARGET_NAME
    TARGET_FUNC
    TARGET_ARGS
    TARGET_KWARGS

References:
    pyportable_installer/no3_build_pyproject.py > func:_create_launcher
"""
import os
import sys
import traceback

# add current dir to `sys.path` (this is necessary for embed python)
sys.path.append(os.path.abspath('.'))

# add lib to environment
sys.path.append(os.path.abspath('{LIB_RELDIR}'))

site_packages = '{SITE_PACKAGES}'
if site_packages:  # see `pyportable_installer/main.py:_copy_venv`
    sys.path.append(os.path.abspath(site_packages))

extra_paths = {EXTEND_SYS_PATHS}
if extra_paths:
    sys.path.extend(map(os.path.abspath, extra_paths))


# ------------------------------------------------------------------------------

def launch(main_func, *args, **kwargs):
    try:
        main_func(*args, **kwargs)
    except Exception as e:
        _show_error_info(traceback.format_exc())
    finally:
        input('Press enter or close the window to leave...')
        sys.exit()


def _show_error_info(err_msg, title='Runtime Exception', terminal='console'):
    """
    Args:
        err_msg: suggest passing `traceback.format_exc()`.
        title:
        terminal:

    Rerferences:
        https://stackoverflow.com/questions/1278705/when-i-catch-an-exception
            -how-do-i-get-the-type-file-and-line-number
        https://stackoverflow.com/questions/17280637/tkinter-messagebox-without
            -window
        https://www.cnblogs.com/freeweb/p/5048833.html
    """
    if terminal == 'console':
        print(title + ':', err_msg)
    elif terminal == 'tkinter':
        from tkinter import Tk, messagebox
        root = Tk()
        root.withdraw()
        messagebox.showerror(title=title, message=err_msg)
    elif terminal == 'vbsbox':
        return os.popen(
            'echo msgbox "{{msg}}", 64, "{{title}}" > '
            'alert.vbs && start '
            'alert.vbs && ping -n 2 127.1 > '
            'nul && del alert.vbs'.format(title=title, msg=err_msg)
        ).read()


if __name__ == '__main__':
    # check in target dir to make sure all sequent relative paths references
    # are based on the target dir.
    os.chdir('{TARGET_RELDIR}')

    try:
        if '{TARGET_FUNC}' == '_':  # case 1
            import {TARGET_PKG}.{TARGET_NAME}
        elif '{TARGET_FUNC}' == '*':  # case 2
            from {TARGET_PKG}.{TARGET_NAME} import *
        else:  # case 3
            from {TARGET_PKG}.{TARGET_NAME} import {TARGET_FUNC} as main
            launch(main, *{TARGET_ARGS}, **{TARGET_KWARGS})
    except Exception as e:
        _show_error_info(traceback.format_exc())
        input('Press enter or close the window to leave...')
